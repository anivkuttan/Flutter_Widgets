import 'package:flutter/material.dart';

void main() => runApp(MyApp());

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
        home: Scaffold(
            appBar: AppBar(title: Text('Transision')), //appbar
            body: PageView(children: [
              MyWidget(),
              FirstPage(),
            ]) //pageview
            ));
  }
}

class MyWidget extends StatefulWidget {
  @override
  _MyWidgetState createState() => _MyWidgetState();
}

class _MyWidgetState extends State<MyWidget> with TickerProviderStateMixin {
  AnimationController controller;
  AnimationController sizeController;
  Animation<double> sizeAnimation;
  Animation<double> animation;
  AnimationController sliderController;
  Animation<Offset> sliderAnimation;

  @override
  void initState() {
    super.initState();
    //-------------Scale Trainsition--------------//
    controller = AnimationController(
        vsync: this,
        duration: Duration(milliseconds: 400),
        lowerBound: 0.8,
        upperBound: 1)
      ..repeat();
    // lowerBound is lower value
    // upperBound is higher value
    // if you using Tween then no need of this
    // controller.repeat();
    // this line useed like =>  ..repeat();
    animation = CurvedAnimation(parent: controller, curve: Curves.bounceInOut);
    //Tween<double>(begin: 0.0, end: 1).animate(controller);
    //--------------Size Transition------------//
    sizeController =
        AnimationController(vsync: this, duration: Duration(seconds: 2))
          ..repeat();
    sizeAnimation =
        CurvedAnimation(parent: sizeController, curve: Curves.linear);

//----------slider Transition--------------//
    sliderController =
        AnimationController(vsync: this, duration: Duration(seconds: 2))..repeat(reverse:true) ;
        //  ..repeat(reverse: true);
    sliderAnimation = Tween<Offset>(
      //begin child position
      //end  child moveing positions
      begin: Offset(0,0) , end: Offset(2, 0))
        .animate(
            CurvedAnimation(parent: sliderController, curve: Curves.elasticIn));
  }

  @override
  void dispose() {
    controller.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Center(
      child: Column(children: [
        SlideTransition(
            position: sliderAnimation, child: FlutterLogo(size: 200)),
        SizedBox(height: 200),
        ScaleTransition(
          // alignment :Alignment(0.1,0.5),
          scale: animation,
          child: Container(
            height: 200,
            width: 200,
            decoration: BoxDecoration(
              color: Colors.red,
              borderRadius: BorderRadius.all(
                Radius.circular(20),
              ), //radius
            ), //decoration
          ), //child container
        ), //transition
        SizedBox(height: 200),
        SizeTransition(
          sizeFactor: sizeAnimation,
          axis: Axis.horizontal,
          axisAlignment: -1,
          child: FlutterLogo(size: 200),
        ), //sizeTransition
      ]), //column
    ); //center
  }
}

class FirstPage extends StatefulWidget {
  @override
  _FirstPageState createState() => _FirstPageState();
}

class _FirstPageState extends State<FirstPage> with TickerProviderStateMixin {
  AnimationController rotationController;
  Animation<double> rotationAnimation;
  AnimationController fadeController;
  Animation<double> fadeAnimation;
  @override
  void initState() {
    super.initState();
    //-----------Rotation-------------------//
    rotationController = AnimationController(
      vsync: this,
      duration: Duration(seconds: 2),
      //lowerBound :0,
      // upperBound :0.8,
      //value:1,
    )..forward();
    rotationAnimation =
        CurvedAnimation(parent: rotationController, curve: Curves.linear);
    rotationAnimation.addStatusListener((status) {
      if (status == AnimationStatus.completed) {
        rotationController.reverse();
      } else if (status == AnimationStatus.dismissed) {
        rotationController.forward();
      }
    });

//----------------Fade Animation---------------//
    fadeController = AnimationController(
        vsync: this,
        duration: Duration(seconds: 3),
        value: 0,
        lowerBound: 0,
        upperBound: 1)
      ..repeat();
    fadeAnimation =
        CurvedAnimation(parent: fadeController, curve: Curves.fastOutSlowIn);
  }

  @override
  void dispose() {
    rotationController.dispose();
    fadeController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Center(
      child: Column(
        children: [
          FadeTransition(
              opacity: fadeAnimation,
              child: Text('Anikuttan',
                  style: TextStyle(
                      fontSize: 70, fontWeight: FontWeight.bold))), //fadd
          SizedBox(height: 200),
          RotationTransition(
            turns: rotationAnimation,
            alignment: Alignment(0, 0),
            child: Container(
              height: 200,
              width: 200,
              color: Colors.purple,
            ), //container
          ) //rotation
        ],
      ), //column
    ); //center
  }
}
